D G "__PCM__" 0 0 ""5.008""
D G "__DEVICE__" 0 0 ""
D G "__DATE__" 0 0 ""25-Sep-14""
D G "__TIME__" 0 0 ""22:07:24"" "* File:   main.c"
c L "set_tris_a" 0 1 1 "*"
c L "set_tris_a" 0 1 1 "*"
c L "set_tris_a" 0 1 1 "*"
c L "set_tris_a" 1 1 17 "FUNCTION"
v L "value" 1 31 "int8" `54 
f B "set_tris_a" 1 31 "void(int8 value)" `53 
v L "value" 1 32 "int8" `56 
f B "set_tris_b" 1 32 "void(int8 value)" `55 
v L "value" 1 33 "int8" `58 
f B "set_tris_c" 1 33 "void(int8 value)" `57 
v L "value" 1 34 "int8" `60 
f B "set_tris_e" 1 34 "void(int8 value)" `59 
f B "get_tris_a" 1 35 "int8()" `61 
f B "get_tris_b" 1 36 "int8()" `62 
f B "get_tris_c" 1 37 "int8()" `63 
f B "get_tris_e" 1 38 "int8()" `64 
v L "value" 1 39 "int8" `66 
f B "output_a" 1 39 "void(int8 value)" `65 
v L "value" 1 40 "int8" `68 
f B "output_b" 1 40 "void(int8 value)" `67 
v L "value" 1 41 "int8" `70 
f B "output_c" 1 41 "void(int8 value)" `69 
v L "value" 1 42 "int8" `72 
f B "output_e" 1 42 "void(int8 value)" `71 
f B "input_a" 1 43 "int8()" `73 
f B "input_b" 1 44 "int8()" `74 
f B "input_c" 1 45 "int8()" `75 
f B "input_e" 1 46 "int8()" `76 
f B "input_change_a" 1 47 "int8()" `77 
f B "input_change_b" 1 48 "int8()" `78 
f B "input_change_c" 1 49 "int8()" `79 
f B "input_change_e" 1 50 "int8()" `80 
v L "pin" 1 51 "int16" `82 
f B "input" 1 51 "int8(int16 pin)" `81 
v L "pin" 1 52 "int16" `84 
f B "input_state" 1 52 "int8(int16 pin)" `83 
v L "pin" 1 53 "int16" `86 
f B "output_low" 1 53 "void(int16 pin)" `85 
v L "pin" 1 54 "int16" `88 
f B "output_high" 1 54 "void(int16 pin)" `87 
v L "pin" 1 55 "int16" `90 
f B "output_toggle" 1 55 "void(int16 pin)" `89 
v L "pin" 1 56 "int16" `92 
v L "level" 1 56 "int8" `93 
f B "output_bit" 1 56 "void(int16 pin,int8 level)" `91 
v L "pin" 1 57 "int16" `95 
f B "output_float" 1 57 "void(int16 pin)" `94 
v L "pin" 1 58 "int16" `97 
f B "output_drive" 1 58 "void(int16 pin)" `96  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 62 "96"
d G "PIN_A1" 1 63 "97"
d G "PIN_A2" 1 64 "98"
d G "PIN_A3" 1 65 "99"
d G "PIN_A4" 1 66 "100"
d G "PIN_A5" 1 67 "101"
d G "PIN_A6" 1 68 "102"
d G "PIN_A7" 1 69 "103"
d G "PIN_B0" 1 71 "104"
d G "PIN_B1" 1 72 "105"
d G "PIN_B2" 1 73 "106"
d G "PIN_B3" 1 74 "107"
d G "PIN_B4" 1 75 "108"
d G "PIN_B5" 1 76 "109"
d G "PIN_B6" 1 77 "110"
d G "PIN_B7" 1 78 "111"
d G "PIN_C0" 1 80 "112"
d G "PIN_C1" 1 81 "113"
d G "PIN_C2" 1 82 "114"
d G "PIN_C3" 1 83 "115"
d G "PIN_C4" 1 84 "116"
d G "PIN_C5" 1 85 "117"
d G "PIN_C6" 1 86 "118"
d G "PIN_C7" 1 87 "119"
d G "PIN_E3" 1 89 "131"
d G "FALSE" 1 92 "0"
d G "TRUE" 1 93 "1"
d G "BYTE" 1 95 "int8"
d G "BOOLEAN" 1 96 "int1"
d G "getc" 1 98 "getch"
d G "fgetc" 1 99 "getch"
d G "getchar" 1 100 "getch"
d G "putc" 1 101 "putchar"
d G "fputc" 1 102 "putchar"
d G "fgets" 1 103 "gets"
d G "fputs" 1 104 "puts"
c L "output_drive" 1 1 3 "FUNCTION"
f B "restart_cause" 1 109 "int8()" `98 
f B "reset_cpu" 1 110 "void()" `99 
f B "sleep" 1 111 "void()" `100 
v L "type" 1 112 "int8" `102 
f G "sleep" 1 112 "void(int8 type)" `101  "Constants returned from RESTART_CAUSE() are:"
d G "NORMAL_POWER_UP" 1 114 "0x3C"
d G "BROWNOUT_RESTART" 1 115 "0x3E"
d G "MCLR_FROM_SLEEP" 1 116 "0x27"
d G "WDT_TIMEOUT" 1 117 "0x1F"
d G "WDT_FROM_SLEEP" 1 118 "0x0F"
d G "INTERRUPT_FROM_SLEEP" 1 119 "0x2F"
d G "MCLR_FROM_RUN" 1 120 "0x37"
d G "RESET_INSTRUCTION" 1 121 "0x3B"
d G "STACK_OVERFLOW" 1 122 "0xBF"
d G "STACK_UNDERFLOW" 1 123 "0x7F"
c L "sleep" 1 1 5 "FUNCTION"
v L "mode" 1 130 "int8" `104 
f B "setup_timer_0" 1 130 "void(int8 mode)" `103 
v L "value" 1 131 "int8" `106 
f B "set_timer0" 1 131 "void(int8 value)" `105 
f B "get_timer0" 1 132 "int8()" `107 
v L "mode" 1 133 "int8" `109 
v L "prescaler" 1 133 "int8" `110 
f B "setup_counters" 1 133 "void(int8 mode,int8 prescaler)" `108 
v L "value" 1 134 "int8" `112 
f B "set_rtcc" 1 134 "void(int8 value)" `111 
f B "get_rtcc" 1 135 "int8()" `113  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 137 "0"
d G "T0_EXT_L_TO_H" 1 138 "32"
d G "T0_EXT_H_TO_L" 1 139 "48"
d G "T0_DIV_1" 1 141 "8"
d G "T0_DIV_2" 1 142 "0"
d G "T0_DIV_4" 1 143 "1"
d G "T0_DIV_8" 1 144 "2"
d G "T0_DIV_16" 1 145 "3"
d G "T0_DIV_32" 1 146 "4"
d G "T0_DIV_64" 1 147 "5"
d G "T0_DIV_128" 1 148 "6"
d G "T0_DIV_256" 1 149 "7"
d G "T0_8_BIT" 1 152 "0"
d G "RTCC_INTERNAL" 1 154 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 1 155 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 1 156 "48"
d G "RTCC_DIV_1" 1 157 "8"
d G "RTCC_DIV_2" 1 158 "0"
d G "RTCC_DIV_4" 1 159 "1"
d G "RTCC_DIV_8" 1 160 "2"
d G "RTCC_DIV_16" 1 161 "3"
d G "RTCC_DIV_32" 1 162 "4"
d G "RTCC_DIV_64" 1 163 "5"
d G "RTCC_DIV_128" 1 164 "6"
d G "RTCC_DIV_256" 1 165 "7"
d G "RTCC_8_BIT" 1 166 "0"
c L "get_rtcc" 1 1 7 "FUNCTION"
v L "mode" 1 176 "int16" `115 
f B "setup_wdt" 1 176 "void(int16 mode)" `114 
f B "restart_wdt" 1 177 "void()" `116  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 1 179 "0x1000"
d G "WDT_OFF" 1 180 "0x2000"
d G "WDT_1MS" 1 182 "0x100"
d G "WDT_2MS" 1 183 "0x101"
d G "WDT_4MS" 1 184 "0x102"
d G "WDT_8MS" 1 185 "0x103"
d G "WDT_16MS" 1 186 "0x104"
d G "WDT_32MS" 1 187 "0x105"
d G "WDT_64MS" 1 188 "0x106"
d G "WDT_128MS" 1 189 "0x107"
d G "WDT_256MS" 1 190 "0x108"
d G "WDT_512MS" 1 191 "0x109"
d G "WDT_1S" 1 192 "0x10A"
d G "WDT_2S" 1 193 "0x10B"
d G "WDT_4S" 1 194 "0x10C"
d G "WDT_8S" 1 195 "0x10D"
d G "WDT_16S" 1 196 "0x10E"
d G "WDT_32S" 1 197 "0x10F"
d G "WDT_64S" 1 198 "0x110"
d G "WDT_128S" 1 199 "0x111"
d G "WDT_256S" 1 200 "0x112"
c L "restart_wdt" 1 1 3 "FUNCTION"
v L "mode" 1 205 "int16" `118 
f B "setup_timer_1" 1 205 "void(int16 mode)" `117 
f B "get_timer1" 1 206 "int16()" `119 
v L "value" 1 207 "int16" `121 
f B "set_timer1" 1 207 "void(int16 value)" `120  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 1 210 "0"
d G "T1_INTERNAL" 1 211 "0x07"
d G "T1_EXTERNAL" 1 212 "0x87"
d G "T1_EXTERNAL_SYNC" 1 213 "0x83"
d G "T1_FOSC" 1 214 "0x47"
d G "T1_ENABLE_SOSC" 1 216 "0x08"
d G "T1_DIV_BY_1" 1 218 "0"
d G "T1_DIV_BY_2" 1 219 "0x10"
d G "T1_DIV_BY_4" 1 220 "0x20"
d G "T1_DIV_BY_8" 1 221 "0x30"
d G "T1_GATE" 1 223 "0x8000"
d G "T1_GATE_INVERTED" 1 224 "0xC000"
d G "T1_GATE_TOGGLE" 1 225 "0xA000"
d G "T1_GATE_SINGLE" 1 226 "0x9000"
d G "T1_GATE_TIMER2" 1 227 "0x8100"
d G "T1_GATE_COMP1" 1 228 "0x8200"
d G "T1_GATE_COMP2" 1 229 "0x8300"
c L "set_timer1" 1 1 3 "FUNCTION"
v L "mode" 1 234 "int8" `123 
v L "period" 1 234 "int8" `124 
v L "postscale" 1 234 "int8" `125 
f B "setup_timer_2" 1 234 "void(int8 mode,int8 period,int8 postscale)" `122 
f B "get_timer2" 1 235 "int8()" `126 
v L "value" 1 236 "int8" `128 
f B "set_timer2" 1 236 "void(int8 value)" `127  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 1 238 "0"
d G "T2_DIV_BY_1" 1 239 "4"
d G "T2_DIV_BY_4" 1 240 "5"
d G "T2_DIV_BY_16" 1 241 "6"
d G "T2_DIV_BY_64" 1 242 "7"
c L "set_timer2" 1 1 4 "FUNCTION"
v L "mode" 1 248 "int32" `130 
f B "setup_ccp1" 1 248 "void(int32 mode)" `129 
v L "mode" 1 249 "int32" `132 
v L "pwm" 1 249 "int8" `133 
f G "setup_ccp1" 1 249 "void(int32 mode,int8 pwm)" `131 
v L "value" 1 250 "int16" `135 
f B "set_pwm1_duty" 1 250 "void(int16 value)" `134  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 1 252 "0"
d G "CCP_CAPTURE_FE" 1 253 "4"
d G "CCP_CAPTURE_RE" 1 254 "5"
d G "CCP_CAPTURE_DIV_4" 1 255 "6"
d G "CCP_CAPTURE_DIV_16" 1 256 "7"
d G "CCP_COMPARE_SET_ON_MATCH" 1 257 "8"
d G "CCP_COMPARE_CLR_ON_MATCH" 1 258 "9"
d G "CCP_COMPARE_INT" 1 259 "0xA"
d G "CCP_COMPARE_RESET_TIMER" 1 260 "0xB"
d G "CCP_PWM" 1 261 "0xC"
d G "CCP_PWM_PLUS_1" 1 262 "0x1c"
d G "CCP_PWM_PLUS_2" 1 263 "0x2c"
d G "CCP_PWM_PLUS_3" 1 264 "0x3c"
d G "CCP1_C2" 1 268 "0x000"
d G "CCP1_B0" 1 269 "0x100"
d G "CCP2_C1" 1 270 "0x000"
d G "CCP2_B3" 1 271 "0x100"
d G "CCP3_C6" 1 272 "0x000"
d G "CCP3_B5" 1 273 "0x100"
c L "set_pwm1_duty" 1 1 1 "FUNCTION"
v L "mode" 1 277 "int32" `140 
f B "setup_ccp2" 1 277 "void(int32 mode)" `139 
v L "mode" 1 278 "int32" `142 
v L "pwm" 1 278 "int8" `143 
f G "setup_ccp2" 1 278 "void(int32 mode,int8 pwm)" `141 
v L "value" 1 279 "int16" `145 
f B "set_pwm2_duty" 1 279 "void(int16 value)" `144 
c L "set_pwm2_duty" 1 1 1 "FUNCTION"
v L "mode" 1 285 "int32" `150 
f B "setup_ccp3" 1 285 "void(int32 mode)" `149 
v L "mode" 1 286 "int32" `152 
v L "pwm" 1 286 "int8" `153 
f G "setup_ccp3" 1 286 "void(int32 mode,int8 pwm)" `151 
v L "value" 1 287 "int16" `155 
f B "set_pwm3_duty" 1 287 "void(int16 value)" `154 
c L "set_pwm3_duty" 1 1 3 "FUNCTION"
v L "mode" 1 294 "int32" `160 
f B "setup_spi" 1 294 "void(int32 mode)" `159 
v L "value" 1 295 "int8" `162 
f B "spi_write" 1 295 "void(int8 value)" `161 
f B "spi_read" 1 296 "int8()" `163 
v L "value" 1 297 "int8" `165 
f G "spi_read" 1 297 "int8(int8 value)" `164 
f B "spi_data_in" 1 298 "int8()" `166  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 1 300 "0x00"
d G "SPI_MASTER" 1 301 "0x20"
d G "SPI_SLAVE" 1 302 "0x24"
d G "SPI_SCK_IDLE_HIGH" 1 303 "0x10"
d G "SPI_SCK_IDLE_LOW" 1 304 "0x00"
d G "SPI_CLK_DIV_4" 1 305 "0x00"
d G "SPI_CLK_DIV_16" 1 306 "0x01"
d G "SPI_CLK_DIV_64" 1 307 "0x02"
d G "SPI_CLK_T2" 1 308 "0x03"
d G "SPI_SS_DISABLED" 1 309 "0x01"
d G "SPI_DI_C4" 1 311 "0x000000"
d G "SPI_DI_B6" 1 312 "0x010000"
d G "SPI_SCK_C3" 1 313 "0x000000"
d G "SPI_SCK_B7" 1 314 "0x020000"
d G "SPI_DO_C5" 1 315 "0x000000"
d G "SPI_DO_B5" 1 316 "0x040000"
d G "SPI_SS_A5" 1 317 "0x000000"
d G "SPI_SS_A0" 1 318 "0x080000"
d G "SPI_SS_B4" 1 319 "0x100000"
d G "SPI_XMIT_L_TO_H" 1 321 "0x4000"
d G "SPI_XMIT_H_TO_L" 1 322 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 1 324 "0x0000"
d G "SPI_SAMPLE_AT_END" 1 325 "0x8000"
d G "SPI_L_TO_H" 1 328 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 1 329 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in" 1 1 2 "FUNCTION"
v L "baud" 1 333 "int32" `168 
f B "setup_uart" 1 333 "void(int32 baud)" `167 
v L "baud" 1 334 "int32" `170 
v L "stream" 1 334 "int8" `171 
f G "setup_uart" 1 334 "void(int32 baud,int8 stream)" `169 
v L "baud" 1 335 "int32" `173 
v L "stream" 1 335 "int8" `174 
v L "clock" 1 335 "int32" `175 
f G "setup_uart" 1 335 "void(int32 baud,int8 stream,int32 clock)" `172 
v L "baud" 1 336 "int32" `177 
f B "set_uart_speed" 1 336 "void(int32 baud)" `176 
v L "baud" 1 337 "int32" `179 
v L "stream" 1 337 "int8" `180 
f G "set_uart_speed" 1 337 "void(int32 baud,int8 stream)" `178 
v L "baud" 1 338 "int32" `182 
v L "stream" 1 338 "int8" `183 
v L "clock" 1 338 "int32" `184 
f G "set_uart_speed" 1 338 "void(int32 baud,int8 stream,int32 clock)" `181  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 1 342 "2"
d G "UART_DATA" 1 343 "4"
d G "UART_AUTODETECT" 1 344 "8"
d G "UART_AUTODETECT_NOWAIT" 1 345 "9"
d G "UART_WAKEUP_ON_RDA" 1 346 "10"
d G "UART_SEND_BREAK" 1 347 "13"
c L "set_uart_speed" 1 1 3 "FUNCTION"
v L "mode" 1 351 "int16" `186 
f B "setup_comparator_1" 1 351 "void(int16 mode)" `185 
v L "mode" 1 352 "int16" `188 
f B "setup_comparator_2" 1 352 "void(int16 mode)" `187 
v L "mode" 1 353 "int16" `190 
f B "setup_comparator_3" 1 353 "void(int16 mode)" `189 
v L "mode" 1 354 "int16" `192 
f B "setup_comparator_4" 1 354 "void(int16 mode)" `191  "Constants used in setup_comparator_x() are:"
d G "NC_NC" 1 357 "0x003F"
d G "CP1_A0_A2" 1 361 "0x8000"
d G "CP1_A1_A2" 1 362 "0x8001"
d G "CP1_B3_A2" 1 363 "0x8002"
d G "CP1_B1_A2" 1 364 "0x8003"
d G "CP1_VSS_A2" 1 365 "0x8007"
d G "CP1_A0_A3" 1 366 "0x8008"
d G "CP1_A1_A3" 1 367 "0x8009"
d G "CP1_B3_A3" 1 368 "0x800A"
d G "CP1_B1_A3" 1 369 "0x800B"
d G "CP1_VSS_A3" 1 370 "0x800F"
d G "CP1_A0_DAC" 1 371 "0x8028"
d G "CP1_A1_DAC" 1 372 "0x8029"
d G "CP1_B3_DAC" 1 373 "0x802A"
d G "CP1_B1_DAC" 1 374 "0x802B"
d G "CP1_VSS_DAC" 1 375 "0x802F"
d G "CP1_A0_FVR" 1 376 "0x8030"
d G "CP1_A1_FVR" 1 377 "0x8031"
d G "CP1_B3_FVR" 1 378 "0x8032"
d G "CP1_B1_FVR" 1 379 "0x8033"
d G "CP1_VSS_FVR" 1 380 "0x8037"
d G "CP1_A0_VSS" 1 381 "0x8038"
d G "CP1_A1_VSS" 1 382 "0x8039"
d G "CP1_B3_VSS" 1 383 "0x803A"
d G "CP1_B1_VSS" 1 384 "0x803B"
d G "CP1_VSS_VSS" 1 385 "0x803F"
d G "CP1_INT_L2H" 1 387 "0x0080"
d G "CP1_INT_H2L" 1 388 "0x0040"
d G "CP1_OUT_ON_A4" 1 389 "0x2000"
d G "CP1_INVERT" 1 390 "0x1000"
d G "CP1_FAST" 1 391 "0x0400"
d G "CP1_HYST" 1 392 "0x0200"
d G "CP1_SYNC" 1 393 "0x0100"
d G "CP2_A0_A2" 1 397 "0x8000"
d G "CP2_A1_A2" 1 398 "0x8001"
d G "CP2_B3_A2" 1 399 "0x8002"
d G "CP2_B1_A2" 1 400 "0x8003"
d G "CP2_VSS_A2" 1 401 "0x8007"
d G "CP2_A0_B0" 1 402 "0x8008"
d G "CP2_A1_B0" 1 403 "0x8009"
d G "CP2_B3_B0" 1 404 "0x800A"
d G "CP2_B1_B0" 1 405 "0x800B"
d G "CP2_VSS_B0" 1 406 "0x800F"
d G "CP2_A0_DAC" 1 407 "0x8028"
d G "CP2_A1_DAC" 1 408 "0x8029"
d G "CP2_B3_DAC" 1 409 "0x802A"
d G "CP2_B1_DAC" 1 410 "0x802B"
d G "CP2_VSS_DAC" 1 411 "0x802F"
d G "CP2_A0_FVR" 1 412 "0x8030"
d G "CP2_A1_FVR" 1 413 "0x8031"
d G "CP2_B3_FVR" 1 414 "0x8032"
d G "CP2_B1_FVR" 1 415 "0x8033"
d G "CP2_VSS_FVR" 1 416 "0x8037"
d G "CP2_A0_VSS" 1 417 "0x8038"
d G "CP2_A1_VSS" 1 418 "0x8039"
d G "CP2_B3_VSS" 1 419 "0x803A"
d G "CP2_B1_VSS" 1 420 "0x803B"
d G "CP2_VSS_VSS" 1 421 "0x803F"
d G "CP2_INT_L2H" 1 423 "0x00080"
d G "CP2_INT_H2L" 1 424 "0x00040"
d G "CP2_OUT_ON_A5" 1 425 "0x02000"
d G "CP2_OUT_ON_A6" 1 426 "0x12000"
d G "CP2_INVERT" 1 427 "0x01000"
d G "CP2_FAST" 1 428 "0x00400"
d G "CP2_HYST" 1 429 "0x00200"
d G "CP2_SYNC" 1 430 "0x00100"
d G "CP3_A0_A2" 1 434 "0x8000"
d G "CP3_A1_A2" 1 435 "0x8001"
d G "CP3_B3_A2" 1 436 "0x8002"
d G "CP3_B1_A2" 1 437 "0x8003"
d G "CP3_VSS_A2" 1 438 "0x8007"
d G "CP3_A0_B4" 1 439 "0x8008"
d G "CP3_A1_B4" 1 440 "0x8009"
d G "CP3_B3_B4" 1 441 "0x800A"
d G "CP3_B1_B4" 1 442 "0x800B"
d G "CP3_VSS_B4" 1 443 "0x800F"
d G "CP3_A0_DAC" 1 444 "0x8028"
d G "CP3_A1_DAC" 1 445 "0x8029"
d G "CP3_B3_DAC" 1 446 "0x802A"
d G "CP3_B1_DAC" 1 447 "0x802B"
d G "CP3_VSS_DAC" 1 448 "0x802F"
d G "CP3_A0_FVR" 1 449 "0x8030"
d G "CP3_A1_FVR" 1 450 "0x8031"
d G "CP3_B3_FVR" 1 451 "0x8032"
d G "CP3_B1_FVR" 1 452 "0x8033"
d G "CP3_VSS_FVR" 1 453 "0x8037"
d G "CP3_A0_VSS" 1 454 "0x8038"
d G "CP3_A1_VSS" 1 455 "0x8039"
d G "CP3_B3_VSS" 1 456 "0x803A"
d G "CP3_B1_VSS" 1 457 "0x803B"
d G "CP3_VSS_VSS" 1 458 "0x803F"
d G "CP3_INT_L2H" 1 460 "0x0080"
d G "CP3_INT_H2L" 1 461 "0x0040"
d G "CP3_OUT_ON_B5" 1 462 "0x2000"
d G "CP3_INVERT" 1 463 "0x1000"
d G "CP3_FAST" 1 464 "0x0400"
d G "CP3_HYST" 1 465 "0x0200"
d G "CP3_SYNC" 1 466 "0x0100"
d G "CP4_A0_A2" 1 470 "0x8000"
d G "CP4_A1_A2" 1 471 "0x8001"
d G "CP4_B5_A2" 1 472 "0x8002"
d G "CP4_B1_A2" 1 473 "0x8003"
d G "CP4_VSS_A2" 1 474 "0x8007"
d G "CP4_A0_B6" 1 475 "0x8008"
d G "CP4_A1_B6" 1 476 "0x8009"
d G "CP4_B5_B6" 1 477 "0x800A"
d G "CP4_B1_B6" 1 478 "0x800B"
d G "CP4_VSS_B6" 1 479 "0x800F"
d G "CP4_A0_DAC" 1 480 "0x8028"
d G "CP4_A1_DAC" 1 481 "0x8029"
d G "CP4_B5_DAC" 1 482 "0x802A"
d G "CP4_B1_DAC" 1 483 "0x802B"
d G "CP4_VSS_DAC" 1 484 "0x802F"
d G "CP4_A0_FVR" 1 485 "0x8030"
d G "CP4_A1_FVR" 1 486 "0x8031"
d G "CP4_B5_FVR" 1 487 "0x8032"
d G "CP4_B1_FVR" 1 488 "0x8033"
d G "CP4_VSS_FVR" 1 489 "0x8037"
d G "CP4_A0_VSS" 1 490 "0x8038"
d G "CP4_A1_VSS" 1 491 "0x8039"
d G "CP4_B5_VSS" 1 492 "0x803A"
d G "CP4_B1_VSS" 1 493 "0x803B"
d G "CP4_VSS_VSS" 1 494 "0x803F"
d G "CP4_INT_L2H" 1 496 "0x0080"
d G "CP4_INT_H2L" 1 497 "0x0040"
d G "CP4_INVERT" 1 498 "0x1000"
d G "CP4_FAST" 1 499 "0x0400"
d G "CP4_HYST" 1 500 "0x0200"
d G "CP4_SYNC" 1 501 "0x0100"
c L "setup_comparator_4" 1 1 2 "FUNCTION"
v L "mode" 1 510 "int8" `198 
f B "setup_vref" 1 510 "void(int8 mode)" `197  "Constants used in setup_vref() are:"
d G "VREF_OFF" 1 512 "0"
d G "VREF_ON" 1 513 "0x80"
d G "VREF_ADC_OFF" 1 515 "0"
d G "VREF_ADC_1v024" 1 516 "0x01"
d G "VREF_ADC_2v048" 1 517 "0x02"
d G "VREF_ADC_4v096" 1 518 "0x03"
d G "VREF_COMP_DAC_OFF" 1 520 "0"
d G "VREF_COMP_DAC_1v024" 1 521 "0x04"
d G "VREF_COMP_DAC_2v048" 1 522 "0x08"
d G "VREF_COMP_DAC_4v096" 1 523 "0x0C"
d G "TEMPERATURE_INDICATOR_DISABLED" 1 525 "0"
d G "TEMPERATURE_INDICATOR_ENABLED" 1 526 "0x20"
d G "TEMPERATURE_RANGE_LOW" 1 527 "0"
d G "TEMPERATURE_RANGE_HIGH" 1 528 "0x10"
c L "setup_vref" 1 1 6 "FUNCTION"
v L "mode" 1 536 "int8" `200 
f B "setup_dac" 1 536 "void(int8 mode)" `199 
v L "value" 1 537 "int8" `202 
f B "dac_write" 1 537 "void(int8 value)" `201 
v L "mode" 1 538 "int8" `204 
f B "setup_dac2" 1 538 "void(int8 mode)" `203 
v L "value" 1 539 "int8" `206 
f B "dac_write2" 1 539 "void(int8 value)" `205 
v L "mode" 1 540 "int8" `208 
f B "setup_dac3" 1 540 "void(int8 mode)" `207 
v L "value" 1 541 "int8" `210 
f B "dac_write3" 1 541 "void(int8 value)" `209 
v L "mode" 1 542 "int8" `212 
f B "setup_dac4" 1 542 "void(int8 mode)" `211 
v L "value" 1 543 "int8" `214 
f B "dac_write4" 1 543 "void(int8 value)" `213  "Constants used in SETUP_DAC() are:"
d G "DAC_OFF" 1 545 "0"
d G "DAC_VSS_VDD" 1 546 "0x80"
d G "DAC_VREF_VDD" 1 547 "0x81" "Can only be used with setup_dac()"
d G "DAC_VSS_VREF" 1 548 "0x84"
d G "DAC_VREF_VREF" 1 549 "0x85" "Can only be used with setup_dac()"
d G "DAC_VSS_FVR" 1 550 "0x88" "Can only be used with setup_dac()"
d G "DAC_VREF_FVR" 1 551 "0x89" "Can only be used with setup_dac()"
d G "DAC_OUTPUT1" 1 553 "0x20" "DAC voltage level outputted on DACxOUT1 pin"
d G "DAC_OUTPUT2" 1 554 "0x10" "DAC voltage level outputted on DACxOUT1 pin"
c L "dac_write4" 1 1 3 "FUNCTION"
v L "mode" 1 559 "int8" `216 
f B "setup_opamp1" 1 559 "void(int8 mode)" `215 
v L "mode" 1 560 "int8" `218 
f B "setup_opamp2" 1 560 "void(int8 mode)" `217  "Constants used in SETUP_OPAMPx() are:"
d G "OPAMP_ENABLED" 1 562 "0x80"
d G "OPAMP_DISABLED" 1 563 "0x00"
d G "OPAMP_HIGH_GBWP_MODE" 1 564 "0x40"
d G "OPAMP_LOW_GBWP_MODE" 1 565 "0x00"
d G "OPAMP_NI_TO_OPAIN" 1 566 "0x00" "Non-inverting input connects to OPAxIN+ pin"
d G "OPAMP_NI_TO_DAC" 1 567 "0x02" "Non-inverting input connects to DAC output"
d G "OPAMP_NI_TO_FVR" 1 568 "0x03" "Non-inverting input connects to FVR Buffer 2 output"
c L "setup_opamp2" 1 1 2 "FUNCTION"
v L "mode" 1 573 "int8" `220 
f B "setup_oscillator" 1 573 "void(int8 mode)" `219  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 1 576 "0"
d G "OSC_31250" 1 577 " (2*8)"
d G "OSC_62KHZ" 1 578 " (4*8)"
d G "OSC_125KHZ" 1 579 " (5*8)"
d G "OSC_250KHZ" 1 580 " (6*8)"
d G "OSC_500KHZ" 1 581 " (7*8)"
d G "OSC_1MHZ" 1 582 " (11*8)"
d G "OSC_2MHZ" 1 583 " (12*8)"
d G "OSC_4MHZ" 1 584 " (13*8)"
d G "OSC_8MHZ" 1 585 " (14*8)"
d G "OSC_16MHZ" 1 586 " (15*8)"
d G "OSC_TIMER1" 1 588 "1"
d G "OSC_INTRC" 1 589 "2"
d G "OSC_NORMAL" 1 590 "0"
d G "OSC_PLL_ON" 1 592 "0x80"
d G "OSC_PLL_OFF" 1 593 "0"
c L "setup_oscillator" 1 1 4 "FUNCTION"
v L "mode" 1 600 "int16" `222 
f B "setup_adc" 1 600 "void(int16 mode)" `221 
f B "read_adc" 1 601 "int8()" `223 
v L "mode" 1 602 "int8" `225 
f G "read_adc" 1 602 "int8(int8 mode)" `224 
f G "read_adc" 1 603 "int16()" `226 
v L "mode" 1 604 "int8" `228 
f G "read_adc" 1 604 "int16(int8 mode)" `227 
f B "adc_done" 1 605 "int8()" `229  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 1 607 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 1 608 "0x100"
d G "ADC_CLOCK_DIV_4" 1 609 "0x40"
d G "ADC_CLOCK_DIV_8" 1 610 "0x10"
d G "ADC_CLOCK_DIV_32" 1 611 "0x20"
d G "ADC_CLOCK_DIV_16" 1 612 "0x50"
d G "ADC_CLOCK_DIV_64" 1 613 "0x60"
d G "ADC_CLOCK_INTERNAL" 1 614 "0x30" "Internal 2-6us"
c L "adc_done" 1 1 1 "FUNCTION"
v L "pins" 1 617 "int32" `231 
f B "setup_adc_ports" 1 617 "void(int32 pins)" `230 
v L "pins" 1 618 "int32" `233 
v L "referenece" 1 618 "int32" `234 
f G "setup_adc_ports" 1 618 "void(int32 pins,int32 referenece)" `232 
v L "channel" 1 619 "int8" `236 
f B "set_adc_channel" 1 619 "void(int8 channel)" `235  "Constants used is SETUP_ADC_PORTS() are:"
d G "sAN0" 1 623 "0x01000000" "| A0"
d G "sAN1" 1 624 "0x02000000" "| A1"
d G "sAN2" 1 625 "0x04000000" "| A2"
d G "sAN3" 1 626 "0x08000000" "| A3"
d G "sAN4" 1 627 "0x20000000" "| A5"
d G "sAN8" 1 628 "0x00000400" "| B2"
d G "sAN9" 1 629 "0x00000800" "| B3"
d G "sAN10" 1 630 "0x00000200" "| B1"
d G "sAN11" 1 631 "0x00001000" "| B4"
d G "sAN12" 1 632 "0x00000100" "| B0"
d G "sAN13" 1 633 "0x00002000" "| B5"
d G "NO_ANALOG" 1 634 "0" "None"
d G "ALL_ANALOG" 1 635 "0x2F003F00" "A0 A1 A2 A3 A5 B2 B3 B1 B4 B0 B5"
d G "VSS_VDD" 1 638 "0x00000000" "| Range 0 to Vdd"
d G "VSS_VREF" 1 639 "0x00000001" "| Range 0 to Vref+"
d G "VSS_FVR" 1 640 "0x00000003" "| Range 0 to FVR"
d G "VREF_VDD" 1 641 "0x00000004" "| Range Vref- to Vdd"
d G "VREF_VREF" 1 642 "0x00000005" "| Range Vref- to Vref+"
d G "VREF_FVR" 1 643 "0x00000007" "| Range Vref- to FVR"
d G "TEMPERATURE_INDICATOR" 1 647 "0x1D"
d G "DAC_CHANNEL" 1 648 "0x1E"
d G "FVR_CHANNEL" 1 649 "0x1F"
d G "ADC_NEG_REFERENCE" 1 652 "0xFF" "Analog Negative Channel connected to ADC Negative Reference"
d G "ADC_START_AND_READ" 1 655 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 1 656 "1"
d G "ADC_READ_ONLY" 1 657 "6"
c L "set_adc_channel" 1 1 3 "FUNCTION"
v L "x" 1 663 "sint8" `238 
f B "abs" 1 663 "sint8(sint8 x)" `237 
v L "x" 1 664 "sint16" `240 
f G "abs" 1 664 "sint16(sint16 x)" `239 
v L "x" 1 665 "sint32" `242 
f G "abs" 1 665 "sint32(sint32 x)" `241 
v L "x" 1 666 "float" `244 
f G "abs" 1 666 "float(float x)" `243 
v L "??65535" 1 667 "int8" `246 
v L "??65535" 1 667 "int8" `247 
f B "_mul" 1 667 "int16(int8 ,int8 )" `245 
v L "??65535" 1 668 "sint8" `246 
v L "??65535" 1 668 "sint8" `250 
f G "_mul" 1 668 "sint16(sint8 ,sint8 )" `248 
v L "??65535" 1 669 "int16" `246 
v L "??65535" 1 669 "int16" `253 
f G "_mul" 1 669 "int32(int16 ,int16 )" `251 
v L "??65535" 1 670 "sint16" `246 
v L "??65535" 1 670 "sint16" `256 
f G "_mul" 1 670 "sint32(sint16 ,sint16 )" `254  "Memory Manipulation Prototypes:"
v L "bank" 1 673 "int8" `258 
v L "offset" 1 673 "int8" `259 
f B "read_bank" 1 673 "int8(int8 bank,int8 offset)" `257 
v L "bank" 1 674 "int8" `261 
v L "offset" 1 674 "int8" `262 
v L "value" 1 674 "int8" `263 
f B "write_bank" 1 674 "void(int8 bank,int8 offset,int8 value)" `260 
v L "dest" 1 675 "*int8" `265 
v L "src" 1 675 "*int8" `266 
f B "strcpy" 1 675 "void(*int8 dest,*int8 src)" `264 
v L "dest" 1 676 "*int8" `268 
v L "src" 1 676 "*int8" `269 
f B "strcopy" 1 676 "void(*int8 dest,*int8 src)" `267 
v L "destination" 1 677 "*int8" `271 
v L "value" 1 677 "int8" `272 
v L "num" 1 677 "int16" `273 
f B "memset" 1 677 "void(*int8 destination,int8 value,int16 num)" `270 
v L "destination" 1 678 "*int8" `275 
v L "source" 1 678 "*int8" `276 
v L "num" 1 678 "int16" `277 
f B "memcpy" 1 678 "void(*int8 destination,*int8 source,int16 num)" `274  "String Prototypes:"
v L "cvalue" 1 681 "int8" `279 
f B "toupper" 1 681 "int8(int8 cvalue)" `278 
v L "cvalue" 1 682 "int8" `281 
f B "tolower" 1 682 "int8(int8 cvalue)" `280 
v L "string" 1 683 "*int8" `283 
v L "cstring" 1 683 "*int8" `284 
f B "sprintf" 1 683 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `282  "Data Manipulators Prototypes:"
v L "address" 1 686 "*int8" `287 
v L "bytes" 1 686 "int8" `288 
v L "value" 1 686 "int8" `289 
f B "shift_left" 1 686 "int8(*int8 address,int8 bytes,int8 value)" `286 
v L "address" 1 687 "*int8" `291 
v L "bytes" 1 687 "int8" `292 
v L "value" 1 687 "int8" `293 
f B "shift_right" 1 687 "int8(*int8 address,int8 bytes,int8 value)" `290 
v L "address" 1 688 "*int8" `295 
v L "bytes" 1 688 "int8" `296 
f B "rotate_left" 1 688 "void(*int8 address,int8 bytes)" `294 
v L "address" 1 689 "*int8" `298 
v L "bytes" 1 689 "int8" `299 
f B "rotate_right" 1 689 "void(*int8 address,int8 bytes)" `297 
v L "value" 1 690 "int8" `301 
f B "swap" 1 690 "void(int8 value)" `300 
v L "var" 1 691 "int16" `303 
v L "offset" 1 691 "int8" `304 
f B "make8" 1 691 "int8(int16 var,int8 offset)" `302 
v L "var" 1 692 "int32" `303 
v L "offset" 1 692 "int8" `307 
f G "make8" 1 692 "int8(int32 var,int8 offset)" `305 
v L "varhigh" 1 693 "int8" `309 
v L "varlow" 1 693 "int8" `310 
f B "make16" 1 693 "int16(int8 varhigh,int8 varlow)" `308 
v L "var1" 1 694 "int16" `312 
f B "make32" 1 694 "int32(int16 var1)" `311 
v L "var1" 1 695 "int16" `314 
v L "var2" 1 695 "int16" `315 
f G "make32" 1 695 "int32(int16 var1,int16 var2)" `313 
v L "var1" 1 696 "int16" `314 
v L "var2" 1 696 "int8" `318 
f G "make32" 1 696 "int32(int16 var1,int8 var2)" `316 
v L "var1" 1 697 "int16" `320 
v L "var2" 1 697 "int8" `321 
v L "var3" 1 697 "int8" `322 
f G "make32" 1 697 "int32(int16 var1,int8 var2,int8 var3)" `319 
v L "var1" 1 698 "int8" `324 
f G "make32" 1 698 "int32(int8 var1)" `323 
v L "var1" 1 699 "int8" `314 
v L "var2" 1 699 "int8" `327 
f G "make32" 1 699 "int32(int8 var1,int8 var2)" `325 
v L "var1" 1 700 "int8" `320 
v L "var2" 1 700 "int8" `321 
v L "var3" 1 700 "int8" `331 
f G "make32" 1 700 "int32(int8 var1,int8 var2,int8 var3)" `328 
v L "var1" 1 701 "int8" `333 
v L "var2" 1 701 "int8" `334 
v L "var3" 1 701 "int8" `335 
v L "var4" 1 701 "int8" `336 
f G "make32" 1 701 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `332 
v L "var1" 1 702 "int8" `314 
v L "var2" 1 702 "int16" `339 
f G "make32" 1 702 "int32(int8 var1,int16 var2)" `337 
v L "var1" 1 703 "int8" `320 
v L "var2" 1 703 "int16" `321 
v L "var3" 1 703 "int8" `343 
f G "make32" 1 703 "int32(int8 var1,int16 var2,int8 var3)" `340 
v L "var1" 1 704 "int8" `320 
v L "var2" 1 704 "int8" `321 
v L "var3" 1 704 "int16" `347 
f G "make32" 1 704 "int32(int8 var1,int8 var2,int16 var3)" `344 
v L "var" 1 705 "int8" `349 
v L "bit" 1 705 "int8" `350 
f B "bit_set" 1 705 "void(int8 var,int8 bit)" `348 
v L "var" 1 706 "int16" `349 
v L "bit" 1 706 "int8" `353 
f G "bit_set" 1 706 "void(int16 var,int8 bit)" `351 
v L "var" 1 707 "int32" `349 
v L "bit" 1 707 "int8" `356 
f G "bit_set" 1 707 "void(int32 var,int8 bit)" `354 
v L "var" 1 708 "int8" `358 
v L "bit" 1 708 "int8" `359 
f B "bit_clear" 1 708 "void(int8 var,int8 bit)" `357 
v L "var" 1 709 "int16" `358 
v L "bit" 1 709 "int8" `362 
f G "bit_clear" 1 709 "void(int16 var,int8 bit)" `360 
v L "var" 1 710 "int32" `358 
v L "bit" 1 710 "int8" `365 
f G "bit_clear" 1 710 "void(int32 var,int8 bit)" `363 
v L "var" 1 711 "int8" `367 
v L "bit" 1 711 "int8" `368 
f B "bit_test" 1 711 "int8(int8 var,int8 bit)" `366 
v L "var" 1 712 "int16" `367 
v L "bit" 1 712 "int8" `371 
f G "bit_test" 1 712 "int8(int16 var,int8 bit)" `369 
v L "var" 1 713 "int32" `367 
v L "bit" 1 713 "int8" `374 
f G "bit_test" 1 713 "int8(int32 var,int8 bit)" `372  "#use delay() Prototypes:"
v L "count" 1 716 "int8" `376 
f B "delay_cycles" 1 716 "void(int8 count)" `375 
v L "time" 1 717 "int16" `378 
f B "delay_ms" 1 717 "void(int16 time)" `377 
v L "time" 1 718 "int16" `380 
f B "delay_us" 1 718 "void(int16 time)" `379  "#use rs232() Prototypes:"
v L "cdata" 1 721 "int8" `382 
f B "putchar" 1 721 "void(int8 cdata)" `381 
v L "cdata" 1 722 "int8" `384 
v L "stream" 1 722 "int8" `385 
f G "putchar" 1 722 "void(int8 cdata,int8 stream)" `383 
v L "string" 1 723 "*int8" `387 
f B "puts" 1 723 "void(*int8 string)" `386 
v L "string" 1 724 "*int8" `389 
v L "stream" 1 724 "int8" `390 
f G "puts" 1 724 "void(*int8 string,int8 stream)" `388 
f B "getch" 1 725 "int8()" `391 
v L "stream" 1 726 "int8" `393 
f G "getch" 1 726 "int8(int8 stream)" `392 
v L "string" 1 727 "*int8" `395 
f B "gets" 1 727 "void(*int8 string)" `394 
v L "string" 1 728 "*int8" `397 
v L "stream" 1 728 "int8" `398 
f G "gets" 1 728 "void(*int8 string,int8 stream)" `396 
f B "kbhit" 1 729 "int8()" `399 
v L "stream" 1 730 "int8" `401 
f G "kbhit" 1 730 "int8(int8 stream)" `400 
v L "string" 1 731 "*int8" `403 
f B "printf" 1 731 "void(*int8 string,*int8 _VA_LIST)" `402 
v L "stream" 1 732 "int8" `406 
v L "string" 1 732 "*int8" `407 
f B "fprintf" 1 732 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `405 
f B "putc_send" 1 733 "void()" `409 
v L "stream" 1 734 "int8" `411 
f B "fputc_send" 1 734 "void(int8 stream)" `410 
f B "rcv_buffer_full" 1 735 "int8()" `412 
v L "stream" 1 736 "int8" `414 
f G "rcv_buffer_full" 1 736 "int8(int8 stream)" `413 
f B "rcv_buffer_bytes" 1 737 "int16()" `415 
v L "stream" 1 738 "int8" `417 
f G "rcv_buffer_bytes" 1 738 "int16(int8 stream)" `416 
f B "tx_buffer_full" 1 739 "int8()" `418 
v L "stream" 1 740 "int8" `420 
f G "tx_buffer_full" 1 740 "int8(int8 stream)" `419 
f B "tx_buffer_bytes" 1 741 "int16()" `421 
v L "stream" 1 742 "int8" `423 
f G "tx_buffer_bytes" 1 742 "int16(int8 stream)" `422  "#use i2c() Prototypes:"
f B "i2c_read" 1 745 "int8()" `424 
v L "stream" 1 746 "int8" `426 
f G "i2c_read" 1 746 "int8(int8 stream)" `425 
v L "stream" 1 747 "int8" `428 
v L "ack" 1 747 "int8" `429 
f G "i2c_read" 1 747 "int8(int8 stream,int8 ack)" `427 
v L "data" 1 748 "int8" `431 
f B "i2c_write" 1 748 "int8(int8 data)" `430 
v L "stream" 1 749 "int8" `433 
v L "data" 1 749 "int8" `434 
f G "i2c_write" 1 749 "int8(int8 stream,int8 data)" `432 
f B "i2c_start" 1 750 "void()" `435 
v L "stream" 1 751 "int8" `437 
f G "i2c_start" 1 751 "void(int8 stream)" `436 
v L "stream" 1 752 "int8" `439 
v L "restart" 1 752 "int8" `440 
f G "i2c_start" 1 752 "void(int8 stream,int8 restart)" `438 
f B "i2c_stop" 1 753 "void()" `441 
v L "stream" 1 754 "int8" `443 
f G "i2c_stop" 1 754 "void(int8 stream)" `442 
f B "i2c_isr_state" 1 755 "int8()" `444 
v L "addr" 1 756 "int8" `446 
f B "i2c_slaveaddr" 1 756 "void(int8 addr)" `445 
v L "stream" 1 757 "int8" `448 
v L "addr" 1 757 "int8" `449 
f G "i2c_slaveaddr" 1 757 "void(int8 stream,int8 addr)" `447 
f B "i2c_poll" 1 758 "int8()" `450 
v L "stream" 1 759 "int8" `452 
f G "i2c_poll" 1 759 "int8(int8 stream)" `451 
v L "baud" 1 760 "int32" `454 
f B "i2c_init" 1 760 "void(int32 baud)" `453 
v L "stream" 1 761 "int8" `456 
v L "baud" 1 761 "int32" `457 
f G "i2c_init" 1 761 "void(int8 stream,int32 baud)" `455  "#use spi() Prototypes:"
f B "spi_xfer" 1 764 "int8()" `458 
f G "spi_xfer" 1 765 "int16()" `459 
f G "spi_xfer" 1 766 "int32()" `460 
v L "data" 1 767 "int8" `462 
f G "spi_xfer" 1 767 "int8(int8 data)" `461 
v L "data" 1 768 "int16" `464 
f G "spi_xfer" 1 768 "int16(int16 data)" `463 
v L "data" 1 769 "int32" `466 
f G "spi_xfer" 1 769 "int32(int32 data)" `465 
v L "stream" 1 770 "int8" `468 
v L "data" 1 770 "int8" `469 
f G "spi_xfer" 1 770 "int8(int8 stream,int8 data)" `467 
v L "stream" 1 771 "int8" `468 
v L "data" 1 771 "int16" `472 
f G "spi_xfer" 1 771 "int16(int8 stream,int16 data)" `470 
v L "stream" 1 772 "int8" `468 
v L "data" 1 772 "int32" `475 
f G "spi_xfer" 1 772 "int32(int8 stream,int32 data)" `473 
v L "stream" 1 773 "int8" `477 
v L "data" 1 773 "int8" `478 
v L "bits" 1 773 "int8" `479 
f G "spi_xfer" 1 773 "int8(int8 stream,int8 data,int8 bits)" `476 
v L "stream" 1 774 "int8" `477 
v L "data" 1 774 "int16" `478 
v L "bits" 1 774 "int8" `483 
f G "spi_xfer" 1 774 "int16(int8 stream,int16 data,int8 bits)" `480 
v L "stream" 1 775 "int8" `477 
v L "data" 1 775 "int32" `478 
v L "bits" 1 775 "int8" `487 
f G "spi_xfer" 1 775 "int32(int8 stream,int32 data,int8 bits)" `484 
v L "baud" 1 776 "int32" `489 
f B "spi_init" 1 776 "void(int32 baud)" `488 
v L "stream" 1 777 "int8" `491 
v L "baud" 1 777 "int32" `492 
f G "spi_init" 1 777 "void(int8 stream,int32 baud)" `490 
v L "baud" 1 778 "int32" `494 
f B "spi_speed" 1 778 "void(int32 baud)" `493 
v L "stream" 1 779 "int8" `496 
v L "baud" 1 779 "int32" `497 
f G "spi_speed" 1 779 "void(int8 stream,int32 baud)" `495 
v L "stream" 1 780 "int8" `499 
v L "baud" 1 780 "int32" `500 
v L "clock" 1 780 "int32" `501 
f G "spi_speed" 1 780 "void(int8 stream,int32 baud,int32 clock)" `498 
v L "data" 1 781 "int8" `503 
f B "spi_prewrite" 1 781 "void(int8 data)" `502 
v L "data" 1 782 "int16" `505 
f G "spi_prewrite" 1 782 "void(int16 data)" `504 
v L "data" 1 783 "int32" `507 
f G "spi_prewrite" 1 783 "void(int32 data)" `506 
v L "??65535" 1 784 "int8" `509 
v L "data" 1 784 "int8" `510 
f G "spi_prewrite" 1 784 "void(int8 ,int8 data)" `508 
v L "??65535" 1 785 "int8" `509 
v L "data" 1 785 "int16" `513 
f G "spi_prewrite" 1 785 "void(int8 ,int16 data)" `511 
v L "??65535" 1 786 "int8" `509 
v L "data" 1 786 "int32" `516 
f G "spi_prewrite" 1 786 "void(int8 ,int32 data)" `514 
f B "spi_xfer_in" 1 787 "int8()" `517 
f G "spi_xfer_in" 1 788 "int16()" `518 
f G "spi_xfer_in" 1 789 "int32()" `519 
v L "bits" 1 790 "int8" `521 
f G "spi_xfer_in" 1 790 "int8(int8 bits)" `520 
v L "bits" 1 791 "int8" `523 
f G "spi_xfer_in" 1 791 "int16(int8 bits)" `522 
v L "bits" 1 792 "int8" `525 
f G "spi_xfer_in" 1 792 "int32(int8 bits)" `524 
v L "stream" 1 793 "int8" `527 
v L "bits" 1 793 "int8" `528 
f G "spi_xfer_in" 1 793 "int8(int8 stream,int8 bits)" `526 
v L "stream" 1 794 "int8" `527 
v L "bits" 1 794 "int8" `531 
f G "spi_xfer_in" 1 794 "int16(int8 stream,int8 bits)" `529 
v L "stream" 1 795 "int8" `527 
v L "bits" 1 795 "int8" `534 
f G "spi_xfer_in" 1 795 "int32(int8 stream,int8 bits)" `532  "#use rtos() Prototypes:"
f B "rtos_run" 1 798 "void()" `535 
f B "rtos_yield" 1 799 "void()" `536 
v L "task" 1 800 "int8" `538 
f B "rtos_enable" 1 800 "void(int8 task)" `537 
v L "task" 1 801 "int8" `540 
f B "rtos_disable" 1 801 "void(int8 task)" `539 
f B "rtos_terminate" 1 802 "void()" `541 
v L "flag" 1 803 "int8" `543 
f B "rtos_await" 1 803 "void(int8 flag)" `542 
v L "sem" 1 804 "int8" `545 
f B "rtos_wait" 1 804 "void(int8 sem)" `544 
v L "sem" 1 805 "int8" `547 
f B "rtos_signal" 1 805 "void(int8 sem)" `546 
v L "task" 1 806 "int8" `549 
v L "msg" 1 806 "int8" `550 
f B "rtos_msg_send" 1 806 "void(int8 task,int8 msg)" `548 
f B "rtos_msg_read" 1 807 "int8()" `551 
f B "rtos_msg_poll" 1 808 "int8()" `552 
v L "task" 1 809 "int8" `554 
f B "rtos_overrun" 1 809 "int8(int8 task)" `553 
v L "task" 1 810 "int8" `556 
v L "stat" 1 810 "*int8" `557 
f B "rtos_stats" 1 810 "void(int8 task,*int8 stat)" `555  "#use timer() Prototypes:"
f B "get_ticks" 1 813 "int8()" `558 
f G "get_ticks" 1 814 "int16()" `559 
f G "get_ticks" 1 815 "int32()" `560 
v L "stream" 1 816 "int8" `562 
f G "get_ticks" 1 816 "int8(int8 stream)" `561 
v L "stream" 1 817 "int8" `564 
f G "get_ticks" 1 817 "int16(int8 stream)" `563 
v L "stream" 1 818 "int8" `566 
f G "get_ticks" 1 818 "int32(int8 stream)" `565 
v L "value" 1 819 "int8" `568 
f B "set_ticks" 1 819 "void(int8 value)" `567 
v L "value" 1 820 "int16" `570 
f G "set_ticks" 1 820 "void(int16 value)" `569 
v L "value" 1 821 "int32" `572 
f G "set_ticks" 1 821 "void(int32 value)" `571 
v L "stream" 1 822 "int8" `574 
v L "value" 1 822 "int8" `575 
f G "set_ticks" 1 822 "void(int8 stream,int8 value)" `573 
v L "stream" 1 823 "int8" `574 
v L "value" 1 823 "int16" `578 
f G "set_ticks" 1 823 "void(int8 stream,int16 value)" `576 
v L "stream" 1 824 "int8" `574 
v L "value" 1 824 "int32" `581 
f G "set_ticks" 1 824 "void(int8 stream,int32 value)" `579  "#use pwm() Prototypes:"
f B "pwm_on" 1 827 "void()" `582 
v L "stream" 1 828 "int8" `584 
f G "pwm_on" 1 828 "void(int8 stream)" `583 
f B "pwm_off" 1 829 "void()" `585 
v L "stream" 1 830 "int8" `587 
f G "pwm_off" 1 830 "void(int8 stream)" `586 
v L "duty" 1 831 "int16" `589 
f B "pwm_set_duty" 1 831 "void(int16 duty)" `588 
v L "stream" 1 832 "int8" `591 
v L "duty" 1 832 "int16" `592 
f G "pwm_set_duty" 1 832 "void(int8 stream,int16 duty)" `590 
v L "percent" 1 833 "int16" `594 
f B "pwm_set_duty_percent" 1 833 "void(int16 percent)" `593 
v L "stream" 1 834 "int8" `596 
v L "percent" 1 834 "int16" `597 
f G "pwm_set_duty_percent" 1 834 "void(int8 stream,int16 percent)" `595 
v L "frequency" 1 835 "int32" `599 
f B "pwm_set_frequency" 1 835 "void(int32 frequency)" `598 
v L "stream" 1 836 "int8" `601 
v L "frequency" 1 836 "int32" `602 
f G "pwm_set_frequency" 1 836 "void(int8 stream,int32 frequency)" `600  "#use capture() Prototypes:"
f B "get_capture_time" 1 839 "int16()" `603 
v L "stream" 1 840 "int8" `605 
f G "get_capture_time" 1 840 "int16(int8 stream)" `604 
f B "get_capture_event" 1 841 "int8()" `606 
v L "stream" 1 842 "int8" `608 
f G "get_capture_event" 1 842 "int8(int8 stream)" `607  "Enviroment Prototypes:"
c L "get_capture_event" 1 1 2 "FUNCTION"
v L "address" 1 855 "int16" `610 
f B "goto_address" 1 855 "void(int16 address)" `609 
v L "label" 1 856 "int16" `612 
f B "label_address" 1 856 "int16(int16 label)" `611  "Program Memory Prototypes:"
v L "address" 1 859 "int16" `614 
v L "dataptr" 1 859 "*int8" `615 
v L "count" 1 859 "int16" `616 
f B "read_program_memory" 1 859 "void(int16 address,*int8 dataptr,int16 count)" `613 
v L "address" 1 860 "int16" `618 
f B "read_program_eeprom" 1 860 "int16(int16 address)" `617 
v L "address" 1 861 "int16" `620 
f B "erase_program_eeprom" 1 861 "void(int16 address)" `619 
v L "address" 1 862 "int16" `622 
v L "dataptr" 1 862 "*int8" `623 
v L "count" 1 862 "int16" `624 
f B "write_program_memory" 1 862 "void(int16 address,*int8 dataptr,int16 count)" `621 
v L "address" 1 863 "int16" `626 
v L "data" 1 863 "int16" `627 
f B "write_program_eeprom" 1 863 "void(int16 address,int16 data)" `625  "EEPROM Prototypes:"
t G "__EEADDRESS__" 1 868 "int16" `628 
v L "address" 1 873 "__EEADDRESS__" `630 
f B "read_eeprom" 1 873 "int8(__EEADDRESS__ address)" `629 
v L "address" 1 874 "__EEADDRESS__" `632 
v L "value" 1 874 "int8" `633 
f B "write_eeprom" 1 874 "void(__EEADDRESS__ address,int8 value)" `631  "INT"
c L "write_eeprom" 1 1 4 "FUNCTION"
v L "interrupt" 1 881 "int32" `635 
f B "enable_interrupts" 1 881 "void(int32 interrupt)" `634 
v L "interrupt" 1 882 "int32" `637 
f B "disable_interrupts" 1 882 "void(int32 interrupt)" `636 
v L "interrupt" 1 883 "int32" `639 
f B "clear_interrupt" 1 883 "void(int32 interrupt)" `638 
v L "interrupt" 1 884 "int32" `641 
f B "interrupt_active" 1 884 "int8(int32 interrupt)" `640 
v L "source" 1 885 "int8" `643 
v L "edge" 1 885 "int8" `644 
f B "ext_int_edge" 1 885 "void(int8 source,int8 edge)" `642 
v L "address" 1 886 "int16" `646 
f B "jump_to_irs" 1 886 "void(int16 address)" `645  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 888 "0x40"
d G "H_TO_L" 1 889 "0"
d G "GLOBAL" 1 891 "0x0BC0"
d G "PERIPH" 1 892 "0x0B40"
d G "INT_EXT_L2H" 1 893 "0x50000B10"
d G "INT_EXT_H2L" 1 894 "0x60000B10"
d G "INT_EXT" 1 895 "0x300B10"
d G "INT_TIMER0" 1 896 "0x300B20"
d G "INT_TIMER1" 1 897 "0x309101"
d G "INT_TIMER2" 1 898 "0x309102"
d G "INT_CCP1" 1 899 "0x309104"
d G "INT_SSP" 1 900 "0x309108"
d G "INT_TBE" 1 901 "0x309110"
d G "INT_RDA" 1 902 "0x309120"
d G "INT_AD" 1 903 "0x309140"
d G "INT_TIMER1_GATE" 1 904 "0x309180"
d G "INT_BUSCOL" 1 905 "0x309208"
d G "INT_EEPROM" 1 906 "0x309210"
d G "INT_COMP" 1 907 "0x309220"
d G "INT_COMP2" 1 908 "0x309240"
d G "INT_OSC_FAIL" 1 909 "0x309280"
d G "INT_CCP2" 1 910 "0x309201"
d G "INT_IOC" 1 911 "0x3FFF0B08"
d G "INT_COMP3" 1 912 "0x309202"
d G "INT_PSMC1S" 1 913 "0x309401"
d G "INT_PSMC2S" 1 914 "0x309402"
d G "INT_PSMC1T" 1 915 "0x309410"
d G "INT_PSMC2T" 1 916 "0x309420"
d G "INT_COMP4" 1 917 "0x309204"
d G "INT_PSMC3S" 1 918 "0x309404"
d G "INT_PSMC3T" 1 919 "0x309440"
d G "INT_IOC_A0" 1 920 "0x30010B08"
d G "INT_IOC_A0_L2H" 1 921 "0x10010B08"
d G "INT_IOC_A0_H2L" 1 922 "0x20010B08"
d G "INT_IOC_A1" 1 923 "0x30020B08"
d G "INT_IOC_A1_L2H" 1 924 "0x10020B08"
d G "INT_IOC_A1_H2L" 1 925 "0x20020B08"
d G "INT_IOC_A2" 1 926 "0x30040B08"
d G "INT_IOC_A2_L2H" 1 927 "0x10040B08"
d G "INT_IOC_A2_H2L" 1 928 "0x20040B08"
d G "INT_IOC_A3" 1 929 "0x30080B08"
d G "INT_IOC_A3_L2H" 1 930 "0x10080B08"
d G "INT_IOC_A3_H2L" 1 931 "0x20080B08"
d G "INT_IOC_A4" 1 932 "0x30100B08"
d G "INT_IOC_A4_L2H" 1 933 "0x10100B08"
d G "INT_IOC_A4_H2L" 1 934 "0x20100B08"
d G "INT_IOC_A5" 1 935 "0x30200B08"
d G "INT_IOC_A5_L2H" 1 936 "0x10200B08"
d G "INT_IOC_A5_H2L" 1 937 "0x20200B08"
d G "INT_IOC_A6" 1 938 "0x30400B08"
d G "INT_IOC_A6_L2H" 1 939 "0x10400B08"
d G "INT_IOC_A6_H2L" 1 940 "0x20400B08"
d G "INT_IOC_A7" 1 941 "0x30800B08"
d G "INT_IOC_A7_L2H" 1 942 "0x10800B08"
d G "INT_IOC_A7_H2L" 1 943 "0x20800B08"
d G "INT_IOC_B0" 1 944 "0x31010B08"
d G "INT_IOC_B0_L2H" 1 945 "0x11010B08"
d G "INT_IOC_B0_H2L" 1 946 "0x21010B08"
d G "INT_IOC_B1" 1 947 "0x31020B08"
d G "INT_IOC_B1_L2H" 1 948 "0x11020B08"
d G "INT_IOC_B1_H2L" 1 949 "0x21020B08"
d G "INT_IOC_B2" 1 950 "0x31040B08"
d G "INT_IOC_B2_L2H" 1 951 "0x11040B08"
d G "INT_IOC_B2_H2L" 1 952 "0x21040B08"
d G "INT_IOC_B3" 1 953 "0x31080B08"
d G "INT_IOC_B3_L2H" 1 954 "0x11080B08"
d G "INT_IOC_B3_H2L" 1 955 "0x21080B08"
d G "INT_IOC_B4" 1 956 "0x31100B08"
d G "INT_IOC_B4_L2H" 1 957 "0x11100B08"
d G "INT_IOC_B4_H2L" 1 958 "0x21100B08"
d G "INT_IOC_B5" 1 959 "0x31200B08"
d G "INT_IOC_B5_L2H" 1 960 "0x11200B08"
d G "INT_IOC_B5_H2L" 1 961 "0x21200B08"
d G "INT_IOC_B6" 1 962 "0x31400B08"
d G "INT_IOC_B6_L2H" 1 963 "0x11400B08"
d G "INT_IOC_B6_H2L" 1 964 "0x21400B08"
d G "INT_IOC_B7" 1 965 "0x31800B08"
d G "INT_IOC_B7_L2H" 1 966 "0x11800B08"
d G "INT_IOC_B7_H2L" 1 967 "0x21800B08"
d G "INT_IOC_C0" 1 968 "0x32010B08"
d G "INT_IOC_C0_L2H" 1 969 "0x12010B08"
d G "INT_IOC_C0_H2L" 1 970 "0x22010B08"
d G "INT_IOC_C1" 1 971 "0x32020B08"
d G "INT_IOC_C1_L2H" 1 972 "0x12020B08"
d G "INT_IOC_C1_H2L" 1 973 "0x22020B08"
d G "INT_IOC_C2" 1 974 "0x32040B08"
d G "INT_IOC_C2_L2H" 1 975 "0x12040B08"
d G "INT_IOC_C2_H2L" 1 976 "0x22040B08"
d G "INT_IOC_C3" 1 977 "0x32080B08"
d G "INT_IOC_C3_L2H" 1 978 "0x12080B08"
d G "INT_IOC_C3_H2L" 1 979 "0x22080B08"
d G "INT_IOC_C4" 1 980 "0x32100B08"
d G "INT_IOC_C4_L2H" 1 981 "0x12100B08"
d G "INT_IOC_C4_H2L" 1 982 "0x22100B08"
d G "INT_IOC_C5" 1 983 "0x32200B08"
d G "INT_IOC_C5_L2H" 1 984 "0x12200B08"
d G "INT_IOC_C5_H2L" 1 985 "0x22200B08"
d G "INT_IOC_C6" 1 986 "0x32400B08"
d G "INT_IOC_C6_L2H" 1 987 "0x12400B08"
d G "INT_IOC_C6_H2L" 1 988 "0x22400B08"
d G "INT_IOC_C7" 1 989 "0x32800B08"
d G "INT_IOC_C7_L2H" 1 990 "0x12800B08"
d G "INT_IOC_C7_H2L" 1 991 "0x22800B08"
d G "INT_IOC_E3" 1 992 "0x34080B08"
d G "INT_IOC_E3_L2H" 1 993 "0x14080B08"
d G "INT_IOC_E3_H2L" 1 994 "0x24080B08"
D G "_STDIO" 2 12 ""
D G "_STRING" 3 12 ""
D G "_STDDEF" 4 13 ""
D G "ptrdiff_t" 4 18 "unsigned int16"
D G "size_t" 4 24 "unsigned int16"
D G "wchar_t" 4 26 "char"
D G "NULL" 4 27 "0"
D G "offsetof" 4 29 "(s,f) (offsetofbit(s,f)/8)"
D G "_CTYPE" 5 12 ""
D G "islower" 5 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 5 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 5 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 5 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 5 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 5 19 "(x)  ((x)==' ')"
D G "isxdigit" 5 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 5 21 "(x)  ((x)<' ')"
D G "isprint" 5 22 "(x)  ((x)>=' ')"
D G "isgraph" 5 23 "(x)  ((x)>' ')"
D G "ispunct" 5 24 "(x)  (((x)>' ')&&!isalnum(x))"
C L "jump_to_irs" 3 19 10 "FUNCTION"
V L "s1" 3 34 "*int8" `648 
V L "s2" 3 34 "*int8" `649 
V L "n" 3 34 "int16" `650 
F G "memmove" 3 35 "*int8(*int8 s1,*int8 s2,int16 n)" `647 
V L "sc1" 3 36 "*int8" `651 
V L "sc2" 3 37 "*int8" `652 
D G "strcopy" 3 54 "strcpy"
C L "strncpy" 3 19 4 "FUNCTION"
V L "s1" 3 61 "*int8" `654 
V L "s2" 3 61 "*int8" `655 
V L "n" 3 61 "int16" `656 
F G "strncpy" 3 62 "*int8(*int8 s1,*int8 s2,int16 n)" `653 
V L "s" 3 63 "*int8" `657 
C L "strcat" 3 19 3 "FUNCTION"
V L "s1" 3 78 "*int8" `659 
V L "s2" 3 78 "*int8" `660 
F G "strcat" 3 79 "*int8(*int8 s1,*int8 s2)" `658 
V L "s" 3 80 "*int8" `661 
C L "strncat" 3 19 2 "FUNCTION"
V L "s1" 3 96 "*int8" `663 
V L "s2" 3 96 "*int8" `664 
V L "n" 3 96 "int16" `665 
F G "strncat" 3 97 "*int8(*int8 s1,*int8 s2,int16 n)" `662 
V L "s" 3 98 "*int8" `666 
C L "memcmp" 3 19 3 "FUNCTION"
V L "s1" 3 120 "*int8" `668 
V L "s2" 3 120 "*int8" `669 
V L "n" 3 120 "int16" `670 
F G "memcmp" 3 121 "sint8(*int8 s1,*int8 s2,int16 n)" `667 
V L "su1" 3 122 "*int8" `671 
V L "su2" 3 122 "*int8" `672 
C L "strcmp" 3 19 2 "FUNCTION"
V L "s1" 3 134 "*int8" `674 
V L "s2" 3 134 "*int8" `675 
F G "strcmp" 3 135 "sint8(*int8 s1,*int8 s2)" `673 
C L "strcoll" 3 19 2 "FUNCTION"
V L "s1" 3 144 "*int8" `677 
V L "s2" 3 144 "*int8" `678 
F G "strcoll" 3 145 "sint8(*int8 s1,*int8 s2)" `676 
C L "strncmp" 3 19 4 "FUNCTION"
V L "s1" 3 157 "*int8" `680 
V L "s2" 3 157 "*int8" `681 
V L "n" 3 157 "int16" `682 
F G "strncmp" 3 158 "sint8(*int8 s1,*int8 s2,int16 n)" `679 
C L "strxfrm" 3 19 3 "FUNCTION"
V L "s1" 3 169 "*int8" `684 
V L "s2" 3 169 "*int8" `685 
V L "n" 3 169 "int16" `686 
F G "strxfrm" 3 170 "int16(*int8 s1,*int8 s2,int16 n)" `683 
V L "s" 3 171 "*int8" `687 
V L "n1" 3 172 "int8" `688 
C L "memchr" 3 19 3 "FUNCTION"
V L "s" 3 191 "*int8" `690 
V L "c" 3 191 "int8" `691 
V L "n" 3 191 "int16" `692 
F G "memchr" 3 192 "*int8(*int8 s,int8 c,int16 n)" `689 
V L "uc" 3 193 "int8" `693 
V L "su" 3 194 "*int8" `694 
C L "strchr" 3 19 2 "FUNCTION"
V L "s" 3 205 "*int8" `696 
V L "c" 3 205 "int8" `697 
F G "strchr" 3 206 "*int8(*int8 s,int8 c)" `695 
C L "strcspn" 3 19 4 "FUNCTION"
V L "s1" 3 217 "*int8" `699 
V L "s2" 3 217 "*int8" `700 
F G "strcspn" 3 218 "int8(*int8 s1,*int8 s2)" `698 
V L "sc1" 3 219 "*int8" `701 
V L "sc2" 3 219 "*int8" `702 
C L "strpbrk" 3 19 4 "FUNCTION"
V L "s1" 3 232 "*int8" `704 
V L "s2" 3 232 "*int8" `705 
F G "strpbrk" 3 233 "*int8(*int8 s1,*int8 s2)" `703 
V L "sc1" 3 234 "*int8" `706 
V L "sc2" 3 234 "*int8" `707 
C L "strrchr" 3 19 2 "FUNCTION"
V L "s" 3 247 "*int8" `709 
V L "c" 3 247 "int8" `710 
F G "strrchr" 3 248 "*int8(*int8 s,int8 c)" `708 
V L "p" 3 249 "*int8" `711 
C L "strspn" 3 19 2 "FUNCTION"
V L "s1" 3 262 "*int8" `713 
V L "s2" 3 262 "*int8" `714 
F G "strspn" 3 263 "int8(*int8 s1,*int8 s2)" `712 
V L "sc1" 3 264 "*int8" `715 
V L "sc2" 3 264 "*int8" `716 
C L "strstr" 3 19 6 "FUNCTION"
V L "s1" 3 281 "*int8" `718 
V L "s2" 3 281 "*int8" `719 
F G "strstr" 3 282 "*int8(*int8 s1,*int8 s2)" `717 
V L "s" 3 283 "*int8" `720 
V L "t" 3 283 "*int8" `721 
C L "strtok" 3 19 13 "FUNCTION"
V L "s1" 3 320 "*int8" `723 
V L "s2" 3 320 "*int8" `724 
F G "strtok" 3 321 "*int8(*int8 s1,*int8 s2)" `722 
V L "beg" 3 322 "*int8" `725 
V L "end" 3 322 "*int8" `726 
V L "save" 3 323 "*int8" `727 
C L "strlen" 3 19 6 "FUNCTION"
V L "s" 3 369 "*int8" `729 
F G "strlen" 3 370 "int8(*int8 s)" `728 
V L "sc" 3 371 "*int8" `730 
C L "stricmp" 3 19 2 "FUNCTION"
V L "s1" 3 380 "*int8" `732 
V L "s2" 3 380 "*int8" `733 
F G "stricmp" 3 381 "sint8(*int8 s1,*int8 s2)" `731 
C L "strlwr" 3 19 3 "FUNCTION"
V L "s" 3 394 "*int8" `737 
F G "strlwr" 3 395 "*int8(*int8 s)" `736 
V L "p" 3 396 "*int8" `738 
C L "strupr" 3 19 3 "FUNCTION"
V L "s" 3 408 "*int8" `740 
F G "strupr" 3 409 "*int8(*int8 s)" `739 
V L "p" 3 410 "*int8" `741 
D G "_STDLIB" 6 12 ""
D G "RAND_MAX" 6 19 "32767" "The value of which is the maximum value"
D G "LONG_POINTERS" 6 25 "1"
T G "div_t" 6 33 "{sint8 quot,sint8 rem}" `745 
T G "ldiv_t" 6 38 "{sint16 quot,sint16 rem}" `749  "(C) Copyright 1996,2003 Custom Computer Services           ////"
C L "atoi" 4 3 6 "FUNCTION"
C L "atoi" 6 43 2 "FUNCTION"
C L "atoi" 6 46 1 "*"
C L "atoi" 6 46 1 "*"
V L "s" 6 50 "*int8" `751 
F G "atoi" 6 50 "sint8(*int8 s)" `750  "Syntax: signed int32  atoi32(char * s)"
V L "s" 6 58 "*int8" `753 
F G "atoi32" 6 58 "sint32(*int8 s)" `752  "Syntax: char *  itoa(signed int32 num, int8 base, char * s)"
C L "atoi32" 6 46 2 "FUNCTION"
V L "num" 6 79 "sint32" `755 
V L "base" 6 79 "int8" `756 
V L "s" 6 79 "*int8" `757 
F G "itoa" 6 79 "*int8(sint32 num,int8 base,*int8 s)" `754  "Standard template: signed int16  atol(char * s)"
C L "itoa" 6 81 1 "*"
C L "itoa" 6 81 1 "*"
V L "s" 6 85 "*int8" `759 
F G "atol" 6 85 "sint16(*int8 s)" `758  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "atol" 6 87 1 "*"
C L "atol" 6 87 1 "*"
C L "atol" 6 87 1 "*"
C L "atol" 6 87 1 "*"
V L "s" 6 93 "*int8" `761 
V L "endptr" 6 93 "*int8" `762 
V L "base" 6 93 "sint8" `763 
F G "strtol" 6 93 "sint16(*int8 s,*int8 endptr,sint8 base)" `760  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "strtol" 6 95 1 "*"
C L "strtol" 6 95 1 "*"
C L "strtol" 6 95 1 "*"
C L "strtol" 6 95 1 "*"
V L "s" 6 101 "*int8" `765 
V L "endptr" 6 101 "*int8" `766 
V L "base" 6 101 "sint8" `767 
F G "strtoul" 6 101 "int16(*int8 s,*int8 endptr,sint8 base)" `764  "Standart template: float strtof(char * s,char *endptr)"
C L "strtoul" 6 95 2 "FUNCTION"
C L "strtoul" 6 103 1 "*"
C L "strtoul" 6 103 1 "*"
C L "strtoul" 6 103 1 "*"
V L "s" 6 110 "*int8" `769 
V L "endptr" 6 110 "*int8" `770 
F G "strtof" 6 110 "float(*int8 s,*int8 endptr)" `768  "provided for compatibility"
D G "strtof48" 6 116 "(s, e) strtof(s, e)"
D G "strtod" 6 117 "(s, e) strtof(s, e)"
C L "strtof" 6 103 1 "FUNCTION"
C L "strtof" 6 120 1 "*"
D G "atof" 6 124 "(s)   strtof(s, 0)"
C L "strtof" 6 120 1 "FUNCTION"
C L "strtof" 6 143 1 "*"
C L "strtof" 6 143 1 "*"
C L "strtof" 6 143 1 "*"
V L "s" 6 149 "*int8" `772 
F G "atoe" 6 149 "float(*int8 s)" `771  "Pseudo-random sequence generation functions"
C L "atoe" 6 143 1 "FUNCTION"
C L "atoe" 6 160 1 "*"
C L "atoe" 6 160 1 "*"
C L "atoe" 6 160 1 "*"
C L "atoe" 6 160 1 "*"
C L "atoe" 6 160 1 "*"
F G "rand" 6 169 "int16()" `773  "The srand function uses the argument as a seed for a new sequence of"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
V L "seed" 6 191 "int32" `775 
F G "srand" 6 191 "void(int32 seed)" `774  "Memory management functions"
C L "srand" 6 171 3 "FUNCTION"
V L "string" 6 205 "*int8" `777 
F G "system" 6 205 "sint8(*int8 string)" `776  "Searching and sorting utilities"
C L "system" 6 171 1 "FUNCTION"
C L "system" 6 211 1 "*"
C L "system" 6 211 1 "*"
C L "system" 6 211 1 "*"
C L "system" 6 211 1 "*"
C L "system" 6 211 1 "*"
C L "system" 6 211 1 "*"
C L "system" 6 211 1 "*"
C L "system" 6 211 1 "*"
C L "system" 6 211 1 "*"
C L "system" 6 211 1 "*"
C L "system" 6 211 4 "*"
C L "system" 6 229 1 "*"
C L "system" 6 229 1 "*"
C L "system" 6 229 1 "*"
C L "system" 6 229 1 "*"
C L "system" 6 229 1 "*"
C L "system" 6 229 1 "*"
C L "system" 6 229 1 "*"
C L "system" 6 229 1 "*"
D G "labs" 6 249 "abs"
V L "numer" 6 251 "sint8" `779 
V L "denom" 6 251 "sint8" `780 
F G "div" 6 251 "div_t(sint8 numer,sint8 denom)" `778 
V L "numer" 6 252 "sint16" `782 
V L "denom" 6 252 "sint16" `783 
F G "ldiv" 6 252 "ldiv_t(sint16 numer,sint16 denom)" `781  "Multibyte character functions"
C L "ldiv" 6 229 4 "FUNCTION"
C L "ldiv" 4 2 7 "FUNCTION"
C L "ldiv" 3 2 7 "FUNCTION"
V L "numer" 6 274 "sint8" `779 
V L "denom" 6 274 "sint8" `786 
F G "div" 6 275 "div_t(sint8 numer,sint8 denom)" `778 
V L "val" 6 276 "div_t" `784 
V L "numer" 6 282 "sint16" `782 
V L "denom" 6 282 "sint16" `793 
F G "ldiv" 6 283 "ldiv_t(sint16 numer,sint16 denom)" `781 
V L "val" 6 284 "ldiv_t" `791 
V L "s" 6 361 "*int8" `799 
F G "atoe" 6 362 "float(*int8 s)" `771 
V L "pow10" 6 363 "float" `798 
V L "result" 6 364 "float" `799 
V L "sign" 6 365 "int8" `800 
V L "expsign" 6 366 "int8" `801 
V L "c" 6 367 "int8" `802 
V L "ptr" 6 368 "int8" `803 
V L "i" 6 369 "int8" `804 
V L "exp" 6 370 "float" `805 
V L "expcnt" 6 371 "int8" `806 
C L "atoe" 6 397 1 "FUNCTION"
V L "s" 6 429 "*int8" `819 
F G "atoi" 6 430 "sint8(*int8 s)" `750 
V L "result" 6 431 "sint8" `818 
V L "sign" 6 432 "int8" `819 
V L "base" 6 432 "int8" `820 
V L "index" 6 432 "int8" `821 
V L "c" 6 433 "int8" `822 
C L "atoi" 6 397 1 "FUNCTION"
C L "atoi" 6 397 1 "FUNCTION"
C L "atoi" 6 397 1 "FUNCTION"
C L "atoi" 6 397 1 "FUNCTION"
C L "atoi" 6 397 1 "FUNCTION"
C L "atoi" 6 397 1 "FUNCTION"
V L "s" 6 498 "*int8" `824 
F G "atol" 6 499 "sint16(*int8 s)" `758 
V L "result" 6 500 "sint16" `823 
V L "sign" 6 501 "int8" `824 
V L "base" 6 501 "int8" `825 
V L "index" 6 501 "int8" `826 
V L "c" 6 502 "int8" `827 
C L "atol" 6 397 1 "FUNCTION"
C L "atol" 6 397 1 "FUNCTION"
C L "atol" 6 397 1 "FUNCTION"
C L "atol" 6 397 1 "FUNCTION"
C L "mult_with10" 6 397 1 "FUNCTION"
V L "num" 6 565 "int32" `829 
F G "mult_with10" 6 566 "sint32(int32 num)" `828 
V L "s" 6 571 "*int8" `831 
F G "atoi32" 6 572 "sint32(*int8 s)" `752 
V L "result" 6 573 "sint32" `830 
V L "sign" 6 574 "int8" `831 
V L "base" 6 574 "int8" `832 
V L "index" 6 574 "int8" `833 
V L "c" 6 575 "int8" `834 
C L "atoi32" 6 397 1 "FUNCTION"
C L "atoi32" 6 397 1 "FUNCTION"
C L "atoi32" 6 397 1 "FUNCTION"
C L "atoi32" 6 397 1 "FUNCTION"
C L "atoi32" 6 397 1 "FUNCTION"
V L "num" 6 770 "sint32" `755 
V L "base" 6 770 "int8" `756 
V L "s" 6 770 "*int8" `838 
F G "itoa" 6 771 "*int8(sint32 num,int8 base,*int8 s)" `754 
V L "temp" 6 772 "int32" `835 
V L "i" 6 773 "int8" `836 
V L "sign" 6 773 "int8" `837 
V L "cnt" 6 773 "int8" `838 
V L "c" 6 774 "int8" `839 
C L "itoa" 6 397 1 "FUNCTION"
C L "itoa" 6 397 1 "FUNCTION"
C L "itoa" 6 397 1 "FUNCTION"
C L "itoa" 6 397 1 "FUNCTION"
C L "itoa" 6 397 1 "FUNCTION"
V L "s" 6 885 "*int8" `769 
V L "endptr" 6 885 "*int8" `848 
F G "strtof" 6 886 "float(*int8 s,*int8 endptr)" `768 
V L "pow10" 6 887 "float" `846 
V L "result" 6 888 "float" `847 
V L "skip" 6 889 "int1" `848 
V L "sign" 6 889 "int1" `849 
V L "point" 6 889 "int1" `850 
V L "c" 6 890 "int8" `851 
V L "ptr" 6 891 "int8" `852 
V L "s" 6 1103 "*int8" `765 
V L "endptr" 6 1103 "*int8" `766 
V L "base" 6 1103 "sint8" `857 
F G "strtoul" 6 1104 "int16(*int8 s,*int8 endptr,sint8 base)" `764 
V L "sc" 6 1105 "*int8" `854 
V L "s1" 6 1105 "*int8" `855 
V L "sd" 6 1105 "*int8" `856 
V L "x" 6 1106 "int16" `857 
V L "sign" 6 1107 "int8" `858 
V L "digits" 6 1108 "int8[1]" `859 
C L "strtoul" 6 397 1 "FUNCTION"
C L "strtoul" 6 397 1 "FUNCTION"
C L "strtoul" 6 397 1 "FUNCTION"
V L "s" 6 1165 "*int8" `761 
V L "endptr" 6 1165 "*int8" `762 
V L "base" 6 1165 "sint8" `864 
F G "strtol" 6 1166 "sint16(*int8 s,*int8 endptr,sint8 base)" `760 
V L "sc" 6 1167 "*int8" `861 
V L "s1" 6 1167 "*int8" `862 
V L "sd" 6 1167 "*int8" `863 
V L "x" 6 1168 "sint16" `864 
V L "sign" 6 1169 "int8" `865 
V L "digits" 6 1170 "int8[1]" `866 
C L "strtol" 6 397 1 "FUNCTION"
C L "strtol" 6 397 1 "FUNCTION"
C L "strtol" 6 397 1 "FUNCTION"
V L "string" 6 1228 "*int8" `869 
F G "system" 6 1229 "sint8(*int8 string)" `776 
V L "s" 6 1233 "*int8" `869 
V L "n" 6 1233 "int16" `870 
F G "mblen" 6 1234 "int8(*int8 s,int16 n)" `868 
V L "pwc" 6 1238 "*int8" `872 
V L "s" 6 1238 "*int8" `873 
V L "n" 6 1238 "int16" `874 
F G "mbtowc" 6 1239 "int8(*int8 pwc,*int8 s,int16 n)" `871 
V L "s" 6 1244 "*int8" `876 
V L "wchar" 6 1244 "int8" `877 
F G "wctomb" 6 1245 "int8(*int8 s,int8 wchar)" `875 
V L "pwcs" 6 1250 "*int8" `879 
V L "s" 6 1250 "*int8" `880 
V L "n" 6 1250 "int16" `881 
F G "mbstowcs" 6 1251 "int16(*int8 pwcs,*int8 s,int16 n)" `878 
V L "s" 6 1256 "*int8" `883 
V L "pwcs" 6 1256 "*int8" `884 
V L "n" 6 1256 "int16" `885 
F G "wcstombs" 6 1257 "int16(*int8 s,*int8 pwcs,int16 n)" `882 
V G "_Randseed" 6 1266 "int32" `886 
F G "rand" 6 1269 "int16()" `773 
V L "seed" 6 1274 "int32" `891 
F G "srand" 6 1275 "void(int32 seed)" `774 
V L "p1" 6 1284 "*int8" `891 
V L "p2" 6 1284 "*int8" `892 
T G "*_Cmpfun" 6 1284 "sint8(*int8 p1,*int8 p2)" `890 
V L "qdata" 6 1291 "*int8" `895 
V L "qitems" 6 1291 "int8" `896 
V L "qsize" 6 1291 "int8" `897 
V L "cmp" 6 1291 "_Cmpfun" `898 
F G "qsort" 6 1291 "void(*int8 qdata,int8 qitems,int8 qsize,_Cmpfun cmp)" `894 
V L "m" 6 1292 "int8" `899 
V L "j" 6 1292 "int8" `900 
V L "i" 6 1292 "int8" `901 
V L "l" 6 1292 "int8" `902 
V L "done" 6 1293 "int1" `903 
V L "t" 6 1294 "int8[16]" `904 
V L "key" 6 1319 "*int8" `907 
V L "base" 6 1319 "*int8" `908 
V L "num" 6 1319 "int16" `909 
V L "width" 6 1319 "int16" `910 
V L "cmp" 6 1319 "_Cmpfun" `911 
F G "bsearch" 6 1320 "*int8(*int8 key,*int8 base,int16 num,int16 width,_Cmpfun cmp)" `906 
V L "p" 6 1321 "*int8" `912 
V L "q" 6 1321 "*int8" `913 
V L "n" 6 1322 "int16" `914 
V L "pivot" 6 1323 "int16" `915 
V L "val" 6 1324 "sint8" `916 
C L "bsearch" 6 397 1 "FUNCTION"
D G "TDots" 0 21 "6" "number of LEDs on the strip"
D G "RAND_MAX" 0 22 "255"
V G "node_list" 0 25 "int32[6]" `927  "Additonal Includes*"
C L "send_frame" 7 1 4 "FUNCTION"
C L "send_frame" 7 7 20 "*"
C L "send_frame" 7 35 2 "*"
F G "send_frame" 7 38 "void()" `928  "NOTE this strip takes data in BLUE, GREEN, RED order"
V L "i" 7 39 "int16" `929 
V L "red" 7 40 "int8" `930 
V L "green" 7 40 "int8" `931 
V L "blue" 7 40 "int8" `932 
C L "send_frame" 7 35 1 "FUNCTION"
F G "addRandom" 7 53 "void()" `933 
V L "x" 7 54 "int16" `934 
V L "new_color" 7 55 "int32" `935 
C L "addRandom" 7 35 1 "FUNCTION"
C L "addRandom" 7 35 1 "FUNCTION"
C L "addRandom" 7 35 1 "FUNCTION"
C L "addRandom" 7 35 1 "FUNCTION"
C L "Color" 7 35 1 "FUNCTION"
V L "r" 7 70 "int8" `937 
V L "g" 7 70 "int8" `938 
V L "b" 7 70 "int8" `939 
F G "Color" 7 70 "int32(int8 r,int8 g,int8 b)" `936  "Take the lowest 8bits of each value and append them end to end"
C L "Wheel" 7 35 2 "FUNCTION"
V L "WheelPos" 7 77 "int16" `941 
F G "Wheel" 7 77 "int32(int16 WheelPos)" `940 
V L "r" 7 78 "int16" `942 
V L "g" 7 79 "int16" `943 
V L "b" 7 80 "int16" `944 
C L "Wheel" 7 35 1 "FUNCTION"
C L "Wheel" 7 35 1 "FUNCTION"
C L "Wheel" 7 35 1 "FUNCTION"
C L "Wheel" 7 35 1 "FUNCTION"
C L "Wheel" 7 35 1 "FUNCTION"
C L "Wheel" 7 35 1 "FUNCTION"
C L "Wheel" 7 35 1 "FUNCTION"
C L "Wheel" 7 35 1 "FUNCTION"
C L "Wheel" 7 35 1 "FUNCTION"
C L "MakeAllColor" 7 35 1 "FUNCTION"
V L "color_set" 7 102 "int32" `946 
F G "MakeAllColor" 7 102 "void(int32 color_set)" `945 
V L "i" 7 103 "int8" `947 
C L "MakeAllColor" 7 35 1 "FUNCTION"
V L "red" 7 112 "int8" `949 
V L "green" 7 112 "int8" `950 
V L "blue" 7 112 "int8" `951 
F G "MakeAllColor" 7 112 "void(int8 red,int8 green,int8 blue)" `948 
V L "i" 7 113 "int8" `952 
F G "setup" 7 121 "void()" `953 
V L "x" 7 122 "int8" `954  "Clear out the array"
C L "MAIN" 0 30 2 "FUNCTION"
V L "argc" 0 33 "int8" `956 
V L "argv" 0 33 "*" `957 
F G "MAIN" 0 33 "int8(int8 argc,* argv)" `955  "setup the IC"
C L "MAIN" 0 30 2 "FUNCTION"
V L "i" 0 39 "int16" `961  "clear the led_strup_colors variable"
C L "MAIN" 0 30 8 "FUNCTION"
C L "MAIN" 0 30 1 "FUNCTION"
C L "MAIN" 0 30 1 "FUNCTION"
C L "MAIN" 0 30 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 4 0
F B "write_program_memory8" 4 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_e" 0 0
F B "set_slow_slew_a" 1 0
F B "set_slow_slew_b" 1 0
F B "set_slow_slew_c" 1 0
F B "set_input_level_a" 1 0
F B "set_input_level_b" 1 0
F B "set_input_level_c" 1 0
F B "set_input_level_e" 1 0
F B "port_a_pullups" 1 0
F B "port_b_pullups" 1 0
F B "port_c_pullups" 1 0
F B "port_d_pullups" 1 0
F B "port_e_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_opamp1" 1 0
F B "setup_opamp2" 1 0
F B "setup_comparator_1" 1 0
F B "setup_comparator_2" 1 0
F B "setup_comparator_3" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_ccp3" 1 0
F B "set_pwm3_duty" 1 0
F B "setup_oscillator" 0 2
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "setup_dac" 1 0
F B "dac_write" 1 0
F B "setup_dac2" 1 0
F B "dac_write2" 1 0
F B "setup_dac3" 1 0
F B "dac_write3" 1 0
F B "setup_dac4" 1 0
F B "dac_write4" 1 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "spi_xfer" 0 3
F B "spi_speed" 1 3
F B "spi_init" 1 2
